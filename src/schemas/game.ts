import { z } from 'zod'

import { personSchema } from './shared'

const playerSchema = z.object({
  person: z.object({ id: z.number(), fullName: z.string(), link: z.string() }),
  jerseyNumber: z.string(),
  position: z.object({
    code: z.string(),
    name: z.string(),
    type: z.string(),
    abbreviation: z.string(),
  }),
  status: z.object({ code: z.string(), description: z.string() }),
  parentTeamId: z.number(),
  battingOrder: z.string().optional(),
  stats: z.object({
    batting: z.object({
      summary: z.string().optional(),
      gamesPlayed: z.number().optional(),
      flyOuts: z.number().optional(),
      groundOuts: z.number().optional(),
      runs: z.number().optional(),
      doubles: z.number().optional(),
      triples: z.number().optional(),
      homeRuns: z.number().optional(),
      strikeOuts: z.number().optional(),
      baseOnBalls: z.number().optional(),
      intentionalWalks: z.number().optional(),
      hits: z.number().optional(),
      hitByPitch: z.number().optional(),
      atBats: z.number().optional(),
      caughtStealing: z.number().optional(),
      stolenBases: z.number().optional(),
      stolenBasePercentage: z.string().optional(),
      groundIntoDoublePlay: z.number().optional(),
      groundIntoTriplePlay: z.number().optional(),
      plateAppearances: z.number().optional(),
      totalBases: z.number().optional(),
      rbi: z.number().optional(),
      leftOnBase: z.number().optional(),
      sacBunts: z.number().optional(),
      sacFlies: z.number().optional(),
      catchersInterference: z.number().optional(),
      pickoffs: z.number().optional(),
      atBatsPerHomeRun: z.string().optional(),
    }),
    pitching: z.object({}),
    fielding: z.object({
      gamesStarted: z.number().optional(),
      caughtStealing: z.number().optional(),
      stolenBases: z.number().optional(),
      stolenBasePercentage: z.string().optional(),
      assists: z.number().optional(),
      putOuts: z.number().optional(),
      errors: z.number().optional(),
      chances: z.number().optional(),
      fielding: z.string().optional(),
      passedBall: z.number().optional(),
      pickoffs: z.number().optional(),
    }),
  }),
  seasonStats: z.object({
    batting: z.object({
      gamesPlayed: z.number(),
      flyOuts: z.number(),
      groundOuts: z.number(),
      runs: z.number(),
      doubles: z.number().optional(),
      triples: z.number().optional(),
      homeRuns: z.number().optional(),
      strikeOuts: z.number().optional(),
      baseOnBalls: z.number().optional(),
      intentionalWalks: z.number().optional(),
      hits: z.number().optional(),
      hitByPitch: z.number().optional(),
      avg: z.string(),
      atBats: z.number().optional(),
      obp: z.string(),
      slg: z.string(),
      ops: z.string(),
      caughtStealing: z.number().optional(),
      stolenBases: z.number().optional(),
      stolenBasePercentage: z.string().optional(),
      groundIntoDoublePlay: z.number().optional(),
      groundIntoTriplePlay: z.number().optional(),
      plateAppearances: z.number().optional(),
      totalBases: z.number().optional(),
      rbi: z.number().optional(),
      leftOnBase: z.number().optional(),
      sacBunts: z.number().optional(),
      sacFlies: z.number().optional(),
      babip: z.string(),
      catchersInterference: z.number().optional(),
      pickoffs: z.number().optional(),
      atBatsPerHomeRun: z.string().optional(),
    }),
    pitching: z.object({
      gamesPlayed: z.number(),
      gamesStarted: z.number().optional(),
      groundOuts: z.number(),
      airOuts: z.number(),
      runs: z.number(),
      doubles: z.number(),
      triples: z.number(),
      homeRuns: z.number(),
      strikeOuts: z.number().optional(),
      baseOnBalls: z.number(),
      intentionalWalks: z.number(),
      hits: z.number(),
      hitByPitch: z.number(),
      atBats: z.number(),
      obp: z.string(),
      caughtStealing: z.number(),
      stolenBases: z.number(),
      stolenBasePercentage: z.string(),
      numberOfPitches: z.number(),
      era: z.string(),
      inningsPitched: z.string(),
      wins: z.number(),
      losses: z.number(),
      saves: z.number(),
      saveOpportunities: z.number(),
      holds: z.number(),
      blownSaves: z.number(),
      earnedRuns: z.number(),
      whip: z.string(),
      battersFaced: z.number(),
      outs: z.number(),
      gamesPitched: z.number(),
      completeGames: z.number(),
      shutouts: z.number(),
      balls: z.number(),
      strikes: z.number(),
      strikePercentage: z.string(),
      hitBatsmen: z.number(),
      balks: z.number(),
      wildPitches: z.number(),
      pickoffs: z.number().optional(),
      groundOutsToAirouts: z.string(),
      rbi: z.number(),
      winPercentage: z.string(),
      pitchesPerInning: z.string(),
      gamesFinished: z.number(),
      strikeoutWalkRatio: z.string(),
      strikeoutsPer9Inn: z.string(),
      walksPer9Inn: z.string(),
      hitsPer9Inn: z.string(),
      runsScoredPer9: z.string(),
      homeRunsPer9: z.string(),
      inheritedRunners: z.number(),
      inheritedRunnersScored: z.number(),
      catchersInterference: z.number(),
      sacBunts: z.number(),
      sacFlies: z.number(),
      passedBall: z.number(),
    }),
    fielding: z.object({
      gamesStarted: z.number().optional(),
      caughtStealing: z.number(),
      stolenBases: z.number(),
      stolenBasePercentage: z.string(),
      assists: z.number(),
      putOuts: z.number(),
      errors: z.number(),
      chances: z.number(),
      fielding: z.string(),
      passedBall: z.number(),
      pickoffs: z.number(),
    }),
  }),
  gameStatus: z.object({
    isCurrentBatter: z.boolean(),
    isCurrentPitcher: z.boolean(),
    isOnBench: z.boolean(),
    isSubstitute: z.boolean(),
  }),
  allPositions: z
    .array(
      z.object({
        code: z.string(),
        name: z.string(),
        type: z.string(),
        abbreviation: z.string(),
      })
    )
    .optional(),
})

const playSchema = z.object({
  result: z.object({
    type: z.string(),
    event: z.string(),
    eventType: z.string().optional(),
    description: z.string(),
    rbi: z.number(),
    awayScore: z.number().optional(),
    homeScore: z.number().optional(),
    isOut: z.boolean(),
  }),
  about: z.object({
    atBatIndex: z.number(),
    halfInning: z.string(),
    isTopInning: z.boolean(),
    inning: z.number(),
    startTime: z.string(),
    endTime: z.string(),
    isComplete: z.boolean(),
    isScoringPlay: z.boolean().optional(),
    hasReview: z.boolean(),
    hasOut: z.boolean(),
    captivatingIndex: z.number(),
  }),
  count: z.object({ balls: z.number(), strikes: z.number(), outs: z.number() }),
  matchup: z.object({
    batter: z.object({
      id: z.number(),
      fullName: z.string(),
      link: z.string(),
    }),
    batSide: z.object({ code: z.string(), description: z.string() }),
    pitcher: z.object({
      id: z.number(),
      fullName: z.string(),
      link: z.string(),
    }),
    pitchHand: z.object({ code: z.string(), description: z.string() }),
    postOnFirst: z
      .object({
        id: z.number(),
        fullName: z.string(),
        link: z.string(),
      })
      .nullish(),
    batterHotColdZones: z.array(z.unknown()),
    pitcherHotColdZones: z.array(z.unknown()),
    splits: z.object({
      batter: z.string(),
      pitcher: z.string(),
      menOnBase: z.string(),
    }),
  }),
  pitchIndex: z.array(z.number()),
  actionIndex: z.array(z.number()),
  runnerIndex: z.array(z.number()),
  runners: z.array(
    z.object({
      movement: z.object({
        originBase: z.string().nullish(),
        start: z.string().nullish(),
        end: z.string().nullish(),
        outBase: z.string().nullish(),
        isOut: z.boolean(),
        outNumber: z.number().nullish(),
      }),
      details: z.object({
        event: z.string(),
        eventType: z.string().optional(),
        movementReason: z.string().nullish(),
        runner: z.object({
          id: z.number(),
          fullName: z.string(),
          link: z.string(),
        }),
        responsiblePitcher: z
          .object({
            id: z.number(),
            link: z.string(),
          })
          .nullish(),
        isScoringEvent: z.boolean(),
        rbi: z.boolean(),
        earned: z.boolean(),
        teamUnearned: z.boolean(),
        playIndex: z.number(),
      }),
      credits: z.array(z.unknown()),
    })
  ),
  playEvents: z.array(
    z.object({
      details: z.object({
        description: z.string().optional(),
        event: z.string().optional(),
        eventType: z.string().optional(),
        awayScore: z.number().optional(),
        homeScore: z.number().optional(),
        isScoringPlay: z.boolean().optional(),
        isOut: z.boolean(),
        hasReview: z.boolean(),
      }),
      count: z.object({
        balls: z.number(),
        strikes: z.number(),
        outs: z.number(),
      }),
      index: z.number(),
      startTime: z.string(),
      endTime: z.string(),
      isPitch: z.boolean(),
      type: z.string(),
      player: z.object({ id: z.number(), link: z.string() }).optional(),
    })
  ),
})

const playByInningSchema = z.object({
  startIndex: z.number(),
  endIndex: z.number(),
  top: z.array(z.number()),
  bottom: z.array(z.number()),
  hits: z.object({
    away: z.array(z.unknown()),
    home: z.array(
      z.object({
        team: z.object({
          springLeague: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
            abbreviation: z.string(),
          }),
          allStarStatus: z.string(),
          id: z.number(),
          name: z.string(),
          link: z.string(),
        }),
        inning: z.number(),
        pitcher: z.object({
          id: z.number(),
          fullName: z.string(),
          link: z.string(),
        }),
        batter: z.object({
          id: z.number(),
          fullName: z.string(),
          link: z.string(),
        }),
        coordinates: z.object({ x: z.number(), y: z.number() }),
        type: z.string(),
        description: z.string(),
      })
    ),
  }),
})

const officialSchema = z.object({
  official: z.object({
    id: z.number(),
    fullName: z.string(),
    link: z.string(),
  }),
  officialType: z.string(),
})

const gameTeamSchema = z.object({
  team: z.object({
    springLeague: z.object({
      id: z.number(),
      name: z.string(),
      link: z.string(),
      abbreviation: z.string(),
    }),
    allStarStatus: z.string(),
    id: z.number(),
    name: z.string(),
    link: z.string(),
  }),
  teamStats: z.object({
    batting: z.object({
      flyOuts: z.number().optional(),
      groundOuts: z.number().optional(),
      runs: z.number().optional(),
      doubles: z.number().optional(),
      triples: z.number().optional(),
      homeRuns: z.number().optional(),
      strikeOuts: z.number().optional(),
      baseOnBalls: z.number().optional(),
      intentionalWalks: z.number().optional(),
      hits: z.number().optional(),
      hitByPitch: z.number().optional(),
      avg: z.string(),
      atBats: z.number().optional(),
      obp: z.string(),
      slg: z.string(),
      ops: z.string(),
      caughtStealing: z.number().optional(),
      stolenBases: z.number().optional(),
      stolenBasePercentage: z.string().optional(),
      groundIntoDoublePlay: z.number().optional(),
      groundIntoTriplePlay: z.number().optional(),
      plateAppearances: z.number().optional(),
      totalBases: z.number().optional(),
      rbi: z.number().optional(),
      leftOnBase: z.number().optional(),
      sacBunts: z.number().optional(),
      sacFlies: z.number().optional(),
      catchersInterference: z.number().optional(),
      pickoffs: z.number().optional(),
      atBatsPerHomeRun: z.string().optional(),
    }),
    pitching: z.object({
      groundOuts: z.number(),
      airOuts: z.number(),
      runs: z.number(),
      doubles: z.number(),
      triples: z.number(),
      homeRuns: z.number(),
      strikeOuts: z.number(),
      baseOnBalls: z.number(),
      intentionalWalks: z.number(),
      hits: z.number(),
      hitByPitch: z.number(),
      atBats: z.number(),
      obp: z.string(),
      caughtStealing: z.number(),
      stolenBases: z.number(),
      stolenBasePercentage: z.string(),
      numberOfPitches: z.number(),
      era: z.string(),
      inningsPitched: z.string(),
      saveOpportunities: z.number(),
      earnedRuns: z.number(),
      whip: z.string(),
      battersFaced: z.number(),
      outs: z.number(),
      completeGames: z.number(),
      shutouts: z.number(),
      pitchesThrown: z.number(),
      balls: z.number(),
      strikes: z.number(),
      strikePercentage: z.string(),
      hitBatsmen: z.number(),
      balks: z.number(),
      wildPitches: z.number(),
      pickoffs: z.number().optional(),
      groundOutsToAirouts: z.string(),
      rbi: z.number(),
      pitchesPerInning: z.string(),
      runsScoredPer9: z.string(),
      homeRunsPer9: z.string(),
      inheritedRunners: z.number(),
      inheritedRunnersScored: z.number(),
      catchersInterference: z.number().optional(),
      sacBunts: z.number().optional(),
      sacFlies: z.number().optional(),
      passedBall: z.number(),
    }),
    fielding: z.object({
      caughtStealing: z.number(),
      stolenBases: z.number(),
      stolenBasePercentage: z.string(),
      assists: z.number(),
      putOuts: z.number(),
      errors: z.number(),
      chances: z.number().optional(),
      passedBall: z.number(),
      pickoffs: z.number(),
    }),
  }),
  players: z.record(z.string(), playerSchema).optional(),
  batters: z.array(z.number()).describe('Array of player IDs that bat'),
  pitchers: z.array(z.number()).describe('Array of player IDs that pitch'),
  bench: z.array(z.number()),
  bullpen: z.array(z.number()),
  battingOrder: z.array(z.number()).optional(),
  info: z.array(
    z.object({
      title: z.string(),
      fieldList: z.array(z.object({ label: z.string(), value: z.string().optional() })),
    })
  ),
  note: z.array(
    z.object({
      label: z.string(),
      value: z.string(),
    })
  ),
})

export const gameSchema = z
  .object({
    copyright: z.string(),
    gamePk: z.number(),
    link: z.string(),
    metaData: z.object({
      wait: z.number(),
      timeStamp: z.string(),
      gameEvents: z.array(z.string()),
      logicalEvents: z.array(z.string()),
    }),
    gameData: z.object({
      game: z.object({
        pk: z.number(),
        type: z.string(),
        doubleHeader: z.string(),
        id: z.string(),
        gamedayType: z.string(),
        tiebreaker: z.string(),
        gameNumber: z.number(),
        calendarEventID: z.string(),
        season: z.string(),
        seasonDisplay: z.string(),
      }),
      datetime: z.object({
        dateTime: z.string(),
        originalDate: z.string(),
        officialDate: z.string(),
        dayNight: z.string(),
        time: z.string(),
        ampm: z.string(),
      }),
      status: z.object({
        abstractGameState: z.string(),
        codedGameState: z.string(),
        detailedState: z.string(),
        statusCode: z.string(),
        startTimeTBD: z.boolean(),
        abstractGameCode: z.string(),
      }),
      teams: z.object({
        away: z.object({
          springLeague: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
            abbreviation: z.string(),
          }),
          allStarStatus: z.string(),
          id: z.number(),
          name: z.string(),
          link: z.string(),
          season: z.number(),
          venue: z.object({ id: z.number(), name: z.string(), link: z.string() }),
          springVenue: z.object({ id: z.number(), link: z.string() }),
          teamCode: z.string(),
          fileCode: z.string(),
          abbreviation: z.string(),
          teamName: z.string(),
          locationName: z.string(),
          firstYearOfPlay: z.string(),
          league: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
          }),
          division: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
          }),
          sport: z.object({ id: z.number(), link: z.string(), name: z.string() }),
          shortName: z.string(),
          record: z.object({
            gamesPlayed: z.number(),
            wildCardGamesBack: z.string(),
            leagueGamesBack: z.string(),
            springLeagueGamesBack: z.string(),
            sportGamesBack: z.string(),
            divisionGamesBack: z.string(),
            conferenceGamesBack: z.string(),
            leagueRecord: z.object({
              wins: z.number(),
              losses: z.number(),
              ties: z.number(),
              pct: z.string(),
            }),
            records: z.object({}),
            divisionLeader: z.boolean(),
            wins: z.number(),
            losses: z.number(),
            winningPercentage: z.string(),
          }),
          franchiseName: z.string(),
          clubName: z.string(),
          active: z.boolean(),
        }),
        home: z.object({
          springLeague: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
            abbreviation: z.string(),
          }),
          allStarStatus: z.string(),
          id: z.number(),
          name: z.string(),
          link: z.string(),
          season: z.number(),
          venue: z.object({ id: z.number(), name: z.string(), link: z.string() }),
          springVenue: z.object({ id: z.number(), link: z.string() }),
          teamCode: z.string(),
          fileCode: z.string(),
          abbreviation: z.string(),
          teamName: z.string(),
          locationName: z.string(),
          firstYearOfPlay: z.string(),
          league: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
          }),
          division: z.object({
            id: z.number(),
            name: z.string(),
            link: z.string(),
          }),
          sport: z.object({ id: z.number(), link: z.string(), name: z.string() }),
          shortName: z.string(),
          record: z.object({
            gamesPlayed: z.number(),
            wildCardGamesBack: z.string(),
            leagueGamesBack: z.string(),
            springLeagueGamesBack: z.string(),
            sportGamesBack: z.string(),
            divisionGamesBack: z.string(),
            conferenceGamesBack: z.string(),
            leagueRecord: z.object({
              wins: z.number(),
              losses: z.number(),
              ties: z.number(),
              pct: z.string(),
            }),
            records: z.object({}),
            divisionLeader: z.boolean(),
            wins: z.number(),
            losses: z.number(),
            winningPercentage: z.string(),
          }),
          franchiseName: z.string(),
          clubName: z.string(),
          active: z.boolean(),
        }),
      }),
    }),
    players: z.record(z.string(), personSchema).optional(),
    liveData: z.object({
      plays: z.object({
        allPlays: z.array(playSchema),
        currentPlay: playSchema,
        scoringPlays: z.array(z.number()),
        playsByInning: z.array(playByInningSchema),
      }),
      boxscore: z.object({
        teams: z.object({
          away: gameTeamSchema,
          home: gameTeamSchema,
        }),
        officials: z.array(officialSchema),
        info: z.array(z.object({ label: z.string(), value: z.string().optional() })),
        pitchingNotes: z.array(z.string()),
      }),
      linescore: z.object({}),
      decisions: z.object({
        winner: z.object({
          id: z.number(),
          fullName: z.string(),
          link: z.string(),
        }),
        loser: z.object({ id: z.number(), fullName: z.string(), link: z.string() }),
      }),
      leaders: z.object({
        hitDistance: z.object({}),
        hitSpeed: z.object({}),
        pitchSpeed: z.object({}),
      }),
    }),
  })
  .describe('Game')

export type GameResponse = z.infer<typeof gameSchema>

export interface GetGameArgs {
  timecode?: string
  hydrate?: string
  fields?: string
  gamePk: string | number
}
